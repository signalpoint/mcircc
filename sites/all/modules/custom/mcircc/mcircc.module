<?php

/**
 * Implements hook_menu().
 */
function mcircc_menu() {
  $items = array();
  $items['admin/mcircc/user-add'] = array(
    'title' => 'Create new user',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcircc_user_add_form'),
    'access arguments' => array('administer users'),
    'file' => 'mcircc.forms.inc'
  );
  return $items;
}

/**
* Implements hook_entity_info_alter().
*/
function mcircc_entity_info_alter(&$entity_info) {
  // Add a custom display mode to the user entity, and profile2 entity.
  $entity_info['user']['view modes']['mcircc_member_directory'] = array(
    'label' => t('MCIRCC Member Directory'),
    'custom settings' => TRUE
  );
}

/**
 * Implements hook_form_alter().
 */
function mcircc_form_alter(&$form, &$form_state, &$form_id) {
  
  global $user;
  
  //drupal_set_message($form_id);
  //dpm($form);
  
  // Attach an after build handler.
  $form['#after_build'][] = 'mcircc_form_after_build';
  
  // Make alterations for regular users...
  if (!mcircc_admin()) {
    
    // Hide the input format section under wysiwygs for non admins.
    if (isset($form['body'])) {
      $form['body']['#after_build'][] = 'mcircc_form_textarea_after_build';
    }
    if (isset($form['comment_body'])) {
      $form['comment_body']['#after_build'][] = 'mcircc_form_textarea_after_build';
    }
    if (isset($form['field_user_biography'])) {
      $form['field_user_biography']['#after_build'][] = 'mcircc_form_textarea_after_build';
    }
  }
  // Make alterations for admin users...
  else {
  }
  
  // Make alterations for all users.
  switch ($form_id) {
    case 'user_profile_form':
      //dpm($form);
      // Make the organisation element on the address field required.
      $form['field_user_address'][LANGUAGE_NONE][0]['organisation_block']['organisation_name']['#required'] = TRUE;
      // Change the links titles to "Academic Publish Articles" and "Michigan Experts Profile".
      $form['field_user_research_interests'][LANGUAGE_NONE][0]['#default_value']['title'] = 'Academic Published Articles';
      $form['field_user_research_interests'][LANGUAGE_NONE][1]['#default_value']['title'] = 'Michigan Experts Profile';
      break;
    case 'question_node_form':
      // On new nodes, check the notification box by default.
      if (!$form['nid']['#value']) {
        $form['field_notify_p'][LANGUAGE_NONE]['#default_value'] = 1;
      }
      break;
    case 'file_node_form':
      $form['title']['#description'] = t(
        'Enter an <em>optional</em> title for your document. This helps others easily locate your
        file through search, and helps others better understand the file\'s
        content at a glance. If left blank, a title will automatically be generated for you.');
      break;
  }

}

/**
 *
 */
function mcircc_form_after_build($form, &$form_state) {
  
  global $user;
  
  //drupal_set_message($form['#form_id']);
  //dpm($form);
  
  switch ($form['#form_id']) {
    
    case 'user_register_form':
      
      if (user_access('administer users')) {
        $form['#prefix'] = isset($form['#prefix']) ? $form['#prefix'] : '';
        $form['#prefix'] .= l(
          'Click here to use the MCIRCC Administrator User Creation Form',
          'admin/mcircc/user-add'
        );
      }
      
      
      // When creating a new user, make a bunch of fields optional, and generate
      // a random password.
      // NOT WORKING AS EXPECTED
      /*if ($form['#user']->uid == 0) {
        $form['field_user_telephone'][LANGUAGE_NONE][0]['#required'] = FALSE;
        $form['field_user_display_name'][LANGUAGE_NONE]['#required'] = FALSE;
        $form['field_user_address'][LANGUAGE_NONE][0]['name_block']['first_name']['#required'] = FALSE;
        $form['field_user_address'][LANGUAGE_NONE][0]['name_block']['last_name']['#required'] = FALSE;
        
      }*/
      
      break;
  }

  return $form;
}

function mcircc_form_textarea_after_build(&$form) {
  $form[LANGUAGE_NONE][0]['format']['#prefix'] = '<div style="display: none;">';
  $form[LANGUAGE_NONE][0]['format']['#suffix'] = '</div>';
  return $form;
}

/**
 * Implements hook_block_info().
 */
function mcircc_block_info() {
  $blocks['mcircc_user_welcome'] = array(
    'info' => t('MCIRCC User Welcome'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['mcircc_new_users'] = array(
    'info' => t('MCIRCC Who is new'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mcircc_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'mcircc_user_welcome':
      $account = user_load($GLOBALS['user']->uid);
      $name = isset($account->field_user_display_name['und'][0]['safe_value']) ?
        $account->field_user_display_name['und'][0]['safe_value'] :
        $account->name;
      $block['content'] = "Welcome to the Virtual Institute, " . 
        "<strong>" . l($name, "{$account->uid}") . "</strong> | " .
        "<span class='mcircc_member'>Member Since</span> <strong>" . date('F Y', $account->created) . "</strong>";
      break;
    case 'mcircc_new_users':
      // Retrieve a list of new users who have subsequently accessed the site successfully.
      $results = db_query_range('
        select
          u.uid, fudm.field_user_display_name_value, ur.rid
        from {users} u
        INNER JOIN {field_data_field_user_display_name} fudm ON u.uid = fudm.entity_id
        LEFT OUTER JOIN {users_roles} ur ON u.uid = ur.uid
        WHERE ur.rid NOT IN (3,4,5) OR ur.rid IS NULL
        ORDER BY u.created LIMIT 5;', 0, variable_get('user_block_whois_new_count', 5))->fetchAll();
      $items = array();
      foreach ($results as $result) {
        $items[] = l($result->field_user_display_name_value, "user/{$result->uid}");
      }
      $block['subject'] = t('Who\'s new');
      $block['content'] = theme('item_list', array('items' => $items));
      break;
  }
  return $block;
}

/**
 * Implements hook_node_access().
 */
function mcircc_node_access($node, $op, $account) {

  // Restrict access to all but a few nodes for anonymous users...
  if ($account->uid == 0 && $op == 'view') {
    // Create a list of node ids (by content type), that are OK to view, then
    // grant access if the user is looking at that node.
    $nodes = array(
      'page' => array(
        1218 /* home page */
      )
    );
    foreach ($nodes as $bundle => $nids) {
      if ($node->type == $bundle && in_array($node->nid, $nids)) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }
  else { return NODE_ACCESS_IGNORE; }
  return NODE_ACCESS_DENY;
}

/**
 * Implements hook_node_view().
 */
function mcircc_node_view($node, $view_mode, $langcode) {
  
  global $user;
  
  // Show the body summary as a sub title on news and events.
  $types = array('news', 'event');
  if (in_array($node->type, $types) && $view_mode == 'full') {
    $node->content['my_additional_field'] = array(
      '#markup' => '<h3>' . $node->body[LANGUAGE_NONE][0]['safe_summary'] . '</h3>',
      '#weight' => -999
    );
  }
  // On the home page, show authenticated users a message with a link to the
  // dashboard.
  else if ($view_mode == 'full' && $node->nid == 1218 && user_is_logged_in()) {
    $node->content['dashboard_link'] = array(
      '#markup' => '<div class="messages status">' .
        l('Click here', 'dashboard') . ' to view your dashboard.' .
      '</div>',
      '#weight' => -999
    );
  }
}

/**
 * Implements hook_user_operations().
 */
function mcircc_user_operations() {
  $operations = array(
    'mcircc_resend_welcome_email' => array(
      'label' => t('Re-send welcome e-mail'),
      'callback' => 'mcircc_resend_welcome_email',
    )
  );
  return $operations;
}

/**
 * Returns true if the current user is considered an MCIRCC admin.
 */
function mcircc_admin() {
  global $user;
  $admin = FALSE;
  if (
    $user->uid != 0 &&
    (
      $user->uid == 1 ||
      in_array('administrator', $user->roles) ||
      in_array('mcircc administrator', $user->roles)
    )
  ) { $admin = TRUE; }
  return $admin;
}

/**
 * Given a Views result row, this will render a user's credentials next to their
 * display name, separated by comma.
 */
function mcircc_user_display_name_with_credentials($row) {
  //dpm($row);
  if (!isset($row->field_field_user_display_name[0])) { return ''; }
  $text = $row->field_field_user_display_name[0]['rendered']['#markup'];
  if (!empty($row->field_field_user_credentials)) {
    $credentials = array();
    foreach ($row->field_field_user_credentials as $credential) {
      $credentials[] = $credential['rendered']['#markup'];
    }
    $text .= ', ' . implode(',', $credentials);
  }
  return $text;
}

/**
 *
 */
function mcircc_resend_welcome_email($accounts) {
  $accounts = user_load_multiple($accounts);
  foreach ($accounts as $account) {
    watchdog('mcircc', 'Re-sent welcome e-mail to %mail.', array('%mail' => $account->mail));
    drupal_set_message(t('Re-sent welcome e-mail to %mail', array('%mail' => $account->mail)));
    $op = 'register_admin_created'; // @see https://api.drupal.org/api/drupal/modules!user!user.module/function/_user_mail_notify/7
    _user_mail_notify($op, $account); 
  }
}

